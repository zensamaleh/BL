-- ==========================================\n-- SCRIPT SQL POUR SUPABASE - AEGEAN BL MANAGEMENT\n-- ==========================================\n-- Copiez et ex\u00e9cutez ce script dans l'interface SQL de Supabase\n-- (Dashboard Supabase > SQL Editor > New query)\n\n-- 1. Extension pour les UUID\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n-- 2. Table des utilisateurs\nCREATE TABLE IF NOT EXISTS users (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    role VARCHAR(20) NOT NULL CHECK (role IN ('chauffeur', 'agent', 'chef')),\n    nom_complet VARCHAR(100) NOT NULL,\n    telephone VARCHAR(20),\n    actif BOOLEAN DEFAULT true,\n    last_login TIMESTAMP,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- 3. Table des bons de livraison\nCREATE TABLE IF NOT EXISTS bons_livraison (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    numero_bl VARCHAR(50) UNIQUE NOT NULL,\n    montant_total DECIMAL(12,2) NOT NULL,\n    nombre_palettes INTEGER NOT NULL DEFAULT 1,\n    date_preparation DATE NOT NULL,\n    date_reception TIMESTAMP,\n    date_saisie TIMESTAMP,\n    statut VARCHAR(20) NOT NULL DEFAULT 'capture' \n        CHECK (statut IN ('capture', 'en_attente', 'valide', 'rejete', 'integre')),\n    notes TEXT,\n    notes_ecart TEXT,\n    chauffeur_id UUID NOT NULL REFERENCES users(id),\n    agent_id UUID REFERENCES users(id),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- 4. Table des images des BL\nCREATE TABLE IF NOT EXISTS bl_images (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    bl_id UUID NOT NULL REFERENCES bons_livraison(id) ON DELETE CASCADE,\n    nom_fichier VARCHAR(255) NOT NULL,\n    chemin_fichier VARCHAR(500) NOT NULL,\n    taille_fichier INTEGER NOT NULL,\n    type_mime VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- 5. Table des \u00e9carts d\u00e9tect\u00e9s\nCREATE TABLE IF NOT EXISTS ecarts (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    bl_id UUID NOT NULL REFERENCES bons_livraison(id) ON DELETE CASCADE,\n    type_ecart VARCHAR(30) NOT NULL \n        CHECK (type_ecart IN ('manquant', 'surplus', 'endommage', 'montant_incorrect')),\n    description TEXT NOT NULL,\n    montant_ecart DECIMAL(12,2),\n    statut VARCHAR(20) NOT NULL DEFAULT 'en_cours'\n        CHECK (statut IN ('en_cours', 'resolu', 'confirme')),\n    detecte_par UUID NOT NULL REFERENCES users(id),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- 6. Table des palettes stock\u00e9es chez le fournisseur\nCREATE TABLE IF NOT EXISTS palettes_stockees (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    numero_palette VARCHAR(50) NOT NULL,\n    bl_id UUID NOT NULL REFERENCES bons_livraison(id),\n    date_stockage DATE NOT NULL,\n    date_recuperation DATE,\n    statut VARCHAR(20) NOT NULL DEFAULT 'stockee'\n        CHECK (statut IN ('stockee', 'recuperee')),\n    emplacement VARCHAR(100),\n    notes TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- 7. Table des logs d'activit\u00e9\nCREATE TABLE IF NOT EXISTS activity_logs (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    user_id UUID NOT NULL REFERENCES users(id),\n    bl_id UUID REFERENCES bons_livraison(id),\n    action VARCHAR(100) NOT NULL,\n    details JSONB,\n    ip_address INET,\n    user_agent TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- 8. Table des rapports g\u00e9n\u00e9r\u00e9s\nCREATE TABLE IF NOT EXISTS rapports (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    nom_rapport VARCHAR(200) NOT NULL,\n    type_rapport VARCHAR(20) NOT NULL \n        CHECK (type_rapport IN ('mensuel', 'hebdomadaire', 'personnalise')),\n    periode_debut DATE NOT NULL,\n    periode_fin DATE NOT NULL,\n    chemin_fichier VARCHAR(500) NOT NULL,\n    statut VARCHAR(20) NOT NULL DEFAULT 'en_cours'\n        CHECK (statut IN ('en_cours', 'termine', 'erreur')),\n    genere_par UUID NOT NULL REFERENCES users(id),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- ==========================================\n-- TRIGGERS ET FONCTIONS\n-- ==========================================\n\n-- Fonction pour mettre \u00e0 jour updated_at\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = CURRENT_TIMESTAMP;\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Triggers pour updated_at\nCREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users \n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_bons_livraison_updated_at BEFORE UPDATE ON bons_livraison \n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_ecarts_updated_at BEFORE UPDATE ON ecarts \n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_palettes_stockees_updated_at BEFORE UPDATE ON palettes_stockees \n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- ==========================================\n-- INDEX POUR LES PERFORMANCES\n-- ==========================================\n\nCREATE INDEX IF NOT EXISTS idx_bons_livraison_numero_bl ON bons_livraison(numero_bl);\nCREATE INDEX IF NOT EXISTS idx_bons_livraison_statut ON bons_livraison(statut);\nCREATE INDEX IF NOT EXISTS idx_bons_livraison_chauffeur ON bons_livraison(chauffeur_id);\nCREATE INDEX IF NOT EXISTS idx_bons_livraison_agent ON bons_livraison(agent_id);\nCREATE INDEX IF NOT EXISTS idx_bons_livraison_date_preparation ON bons_livraison(date_preparation);\nCREATE INDEX IF NOT EXISTS idx_bl_images_bl_id ON bl_images(bl_id);\nCREATE INDEX IF NOT EXISTS idx_ecarts_bl_id ON ecarts(bl_id);\nCREATE INDEX IF NOT EXISTS idx_ecarts_statut ON ecarts(statut);\nCREATE INDEX IF NOT EXISTS idx_palettes_stockees_statut ON palettes_stockees(statut);\nCREATE INDEX IF NOT EXISTS idx_activity_logs_user_id ON activity_logs(user_id);\nCREATE INDEX IF NOT EXISTS idx_activity_logs_created_at ON activity_logs(created_at);\n\n-- ==========================================\n-- VUES POUR LES STATISTIQUES\n-- ==========================================\n\n-- Vue pour les statistiques du dashboard\nCREATE OR REPLACE VIEW dashboard_stats AS\nSELECT \n    COUNT(CASE WHEN DATE(created_at) = CURRENT_DATE THEN 1 END) as bl_aujourd_hui,\n    COUNT(CASE WHEN statut = 'en_attente' THEN 1 END) as bl_en_attente,\n    COUNT(CASE WHEN statut = 'valide' THEN 1 END) as bl_valides,\n    (SELECT COUNT(*) FROM ecarts WHERE statut = 'en_cours') as ecarts_detectes,\n    (SELECT COUNT(*) FROM palettes_stockees WHERE statut = 'stockee') as palettes_stockees,\n    COALESCE(SUM(CASE WHEN EXTRACT(MONTH FROM date_preparation) = EXTRACT(MONTH FROM CURRENT_DATE)\n                          AND EXTRACT(YEAR FROM date_preparation) = EXTRACT(YEAR FROM CURRENT_DATE)\n                     THEN montant_total ELSE 0 END), 0) as montant_total_mois\nFROM bons_livraison;\n\n-- Vue pour les BL avec informations compl\u00e8tes\nCREATE OR REPLACE VIEW bl_complets AS\nSELECT \n    bl.*,\n    c.nom_complet as chauffeur_nom,\n    c.username as chauffeur_username,\n    a.nom_complet as agent_nom,\n    a.username as agent_username,\n    COUNT(img.id) as nombre_images,\n    COUNT(e.id) as nombre_ecarts\nFROM bons_livraison bl\nLEFT JOIN users c ON bl.chauffeur_id = c.id\nLEFT JOIN users a ON bl.agent_id = a.id\nLEFT JOIN bl_images img ON bl.id = img.bl_id\nLEFT JOIN ecarts e ON bl.id = e.bl_id\nGROUP BY bl.id, c.nom_complet, c.username, a.nom_complet, a.username;\n\n-- Vue pour le rapport mensuel\nCREATE OR REPLACE VIEW rapport_mensuel AS\nSELECT \n    numero_bl,\n    montant_total,\n    date_preparation,\n    date_reception,\n    date_saisie,\n    statut,\n    nom_complet as chauffeur_nom\nFROM bons_livraison bl\nJOIN users u ON bl.chauffeur_id = u.id\nORDER BY date_preparation DESC;\n\n-- ==========================================\n-- DONN\u00c9ES DE TEST\n-- ==========================================\n\n-- Insertion des utilisateurs de test (mots de passe hash\u00e9s avec bcrypt)\nINSERT INTO users (username, email, password_hash, role, nom_complet, telephone) VALUES\n('admin', 'admin@aegean.com', '$2a$10$CwTycUXWue0Thq9StjUM0uJ4uK7xhsU2h.Yk.9I3Q9VV9V9V9V9V9', 'chef', 'Administrateur Syst\u00e8me', '+213555000001'),\n('chauffeur1', 'chauffeur1@aegean.com', '$2a$10$CwTycUXWue0Thq9StjUM0uJ4uK7xhsU2h.Yk.9I3Q9VV9V9V9V9V9', 'chauffeur', 'Ahmed Benaissa', '+213555000002'),\n('chauffeur2', 'chauffeur2@aegean.com', '$2a$10$CwTycUXWue0Thq9StjUM0uJ4uK7xhsU2h.Yk.9I3Q9VV9V9V9V9V9', 'chauffeur', 'Mohamed Khelifi', '+213555000003'),\n('agent1', 'agent1@aegean.com', '$2a$10$CwTycUXWue0Thq9StjUM0uJ4uK7xhsU2h.Yk.9I3Q9VV9V9V9V9V9', 'agent', 'Fatima Zenati', '+213555000004'),\n('agent2', 'agent2@aegean.com', '$2a$10$CwTycUXWue0Thq9StjUM0uJ4uK7xhsU2h.Yk.9I3Q9VV9V9V9V9V9', 'agent', 'Leila Mammeri', '+213555000005'),\n('chef1', 'chef1@aegean.com', '$2a$10$CwTycUXWue0Thq9StjUM0uJ4uK7xhsU2h.Yk.9I3Q9VV9V9V9V9V9', 'chef', 'Karim Boudiaf', '+213555000006')\nON CONFLICT (username) DO NOTHING;\n\n-- ==========================================\n-- SCRIPT TERMIN\u00c9\n-- ==========================================\n\n-- Afficher un message de confirmation\nSELECT 'Base de donn\u00e9es Aegean BL Management initialis\u00e9e avec succ\u00e8s!' as message;\n\n-- V\u00e9rifier les tables cr\u00e9\u00e9es\nSELECT table_name \nFROM information_schema.tables \nWHERE table_schema = 'public' \nAND table_type = 'BASE TABLE'\nORDER BY table_name;", "old_string": null}]